class Literal:    def __init__(self,value,type):        self.v = value        self.t = typeclass enviorment:    def __init__(self,inputstack,b,t):        self.i = inputstack.list()        self.b = {}        self.t = {}    def newEnviorment(self):def interpreter(input, output):        inputfile = open(input, "r")        outputfile = open(output, "w")        linereader = inputfile.readlines()        inputstack = list()        error = Literal(":error:","error")        fake = Literal(":false:", "bool")        truth = Literal(":true:", "bool")        bindstack = {}        typestack = {}        scopetrack = 0        for lines in linereader:            if lines.split(' ' , 1)[0] == "push":                x = lines.split(' ',1)[1].strip()                if x[0].isalpha() or isInt(x) or (x.startswith('"') and x.endswith('"')):                    if isInt(x):                        number = Literal(int(x),"int")                        #pushing in an int                        inputstack.append(number)                    if x.startswith('"') and x.endswith('"'):                        #pushing in a string                        inString = Literal(x[1:-1],"string")                        inputstack.append(inString)                    if x[0].isalpha():                        InName = Literal(x,"name")                        inputstack.append(InName)                else:                    inputstack.append(error)            if lines.strip() == "pop":                if not inputstack:                    inputstack.append(error)                else:                    inputstack.pop()            if lines.strip() == ":false:":                inputstack.append(fake)            if lines.strip() == ":true:":                inputstack.append(truth)            if lines.strip() == ":error:":                inputstack.append(error)            #ADD            if lines.strip() == "add":                if len(inputstack) <= 1:                    inputstack.append(error)                else:                    value1 = inputstack.pop()                    value2 = inputstack.pop()                    if value1.t == "int" and value2.t == "int":                        total = value1.v + value2.v                        add = Literal(total,"int")                        inputstack.append(add)                    else:                        if (value1.t == "int" or value1.v in bindstack) and (value2.t == "int" or value2.v in bindstack):                                if value1.t == "name" and value2.t != "name":                                    if isinstance(bindstack[value1.v], int):                                        total = value2.v+bindstack[value1.v]                                        add = Literal(total, "int")                                        inputstack.append(add)                                    else:                                        inputstack.append(value2)                                        inputstack.append(value1)                                        inputstack.append(error)                                if value2.t == "name" and value1.t != "name":                                    if isinstance(bindstack[value2.v], int):                                        total = bindstack[value2.v] + value1.v                                        add = Literal(total, "int")                                        inputstack.append(add)                                    else:                                        inputstack.append(value2)                                        inputstack.append(value1)                                        inputstack.append(error)                                if value1.t == "name" and value2.t == "name":                                    if isinstance(bindstack[value1.v], int) and isinstance(bindstack[value2.v], int):                                        total = bindstack[value2.v]+bindstack[value1.v]                                        add = Literal(total, "int")                                        inputstack.append(add)                                    else:                                        inputstack.append(value2)                                        inputstack.append(value1)                                        inputstack.append(error)                        else:                            inputstack.append(value2)                            inputstack.append(value1)                            inputstack.append(error)            #Substract            if lines.strip() == "sub":                if len(inputstack) <= 1:                    inputstack.append(error)                else:                    value1 = inputstack.pop()                    value2 = inputstack.pop()                    if value1.t == "int" and value2.t == "int":                        total = value2.v - value1.v                        minus = Literal(total,"int")                        inputstack.append(minus)                    else:                        if (value1.t == "int" or value1.v in bindstack) and (value2.t == "int" or value2.v in bindstack) and value1.v != 0:                                if value1.t == "name" and value2.t != "name":                                    if isinstance(bindstack[value1.v], int):                                        total = value2.v-bindstack[value1.v]                                        minus = Literal(total, "int")                                        inputstack.append(minus)                                    else:                                        inputstack.append(value2)                                        inputstack.append(value1)                                        inputstack.append(error)                                if value2.t == "name" and value1.t != "name":                                    if isinstance(bindstack[value2.v], int):                                        total = bindstack[value2.v] - value1.v                                        minus = Literal(total, "int")                                        inputstack.append(minus)                                    else:                                        inputstack.append(value2)                                        inputstack.append(value1)                                        inputstack.append(error)                                if value1.t == "name" and value2.t == "name":                                    if isinstance(bindstack[value1.v], int) and isinstance(bindstack[value2.v], int):                                        total = bindstack[value2.v]-bindstack[value1.v]                                        minus = Literal(total, "int")                                        inputstack.append(minus)                                    else:                                        inputstack.append(value2)                                        inputstack.append(value1)                                        inputstack.append(error)                        else:                            inputstack.append(value2)                            inputstack.append(value1)                            inputstack.append(error)            #MULTIPLY            if lines.strip() == "mul":                if len(inputstack) <= 1:                    inputstack.append(error)                else:                    value1 = inputstack.pop()                    value2 = inputstack.pop()                    if value1.t == "int" and value2.t == "int":                        total = value1.v * value2.v                        mul = Literal(total,"int")                        inputstack.append(mul)                    else:                        if (value1.t == "int" or value1.v in bindstack) and (value2.t == "int" or value2.v in bindstack) and value1.v != 0:                                if value1.t == "name" and value2.t != "name":                                    if isinstance(bindstack[value1.v], int):                                        total = value2.v * bindstack[value1.v]                                        mul = Literal(total, "int")                                        inputstack.append(mul)                                    else:                                        inputstack.append(value2)                                        inputstack.append(value1)                                        inputstack.append(error)                                if value2.t == "name" and value1.t != "name":                                    if isinstance(bindstack[value2.v], int):                                        total = bindstack[value2.v] * value1.v                                        mul = Literal(total, "int")                                        inputstack.append(mul)                                    else:                                        inputstack.append(value2)                                        inputstack.append(value1)                                        inputstack.append(error)                                if value1.t == "name" and value2.t == "name":                                    if isinstance(bindstack[value1.v], int) and isinstance(bindstack[value2.v], int):                                        total = bindstack[value2.v]*bindstack[value1.v]                                        mul = Literal(total, "int")                                        inputstack.append(mul)                                    else:                                        inputstack.append(value2)                                        inputstack.append(value1)                                        inputstack.append(error)                        else:                            inputstack.append(value2)                            inputstack.append(value1)                            inputstack.append(error)            #DIVIDE            if lines.strip() == "div":                if len(inputstack) <= 1:                    inputstack.append(error)                else:                    value1 = inputstack.pop()                    value2 = inputstack.pop()                    if value1.t == "int" and value2.t == "int" and value1.v != 0:                        total = value2.v/value1.v                        div = Literal(total,"int")                        inputstack.append(div)                    else:                        if (value1.t == "int" or value1.v in bindstack) and (value2.t == "int" or value2.v in bindstack) and value1.v != 0:                                if value1.t == "name" and value2.t != "name":                                    if isinstance(bindstack[value1.v], int):                                        total = value2.v/bindstack[value1.v]                                        div = Literal(total, "int")                                        inputstack.append(int(div))                                    else:                                        inputstack.append(value2)                                        inputstack.append(value1)                                        inputstack.append(error)                                if value2.t == "name" and value1.t != "name":                                    if isinstance(bindstack[value2.v], int):                                        total = bindstack[value2.v] / value1.v                                        div = Literal(total, "int")                                        inputstack.append(int(div))                                    else:                                        inputstack.append(value2)                                        inputstack.append(value1)                                        inputstack.append(error)                                if value1.t == "name" and value2.t == "name":                                    if isinstance(bindstack[value1.v], int) and isinstance(bindstack[value2.v], int):                                        total = bindstack[value2.v]/bindstack[value1.v]                                        div = Literal(total, "int")                                        inputstack.append(int(div))                                    else:                                        inputstack.append(value2)                                        inputstack.append(value1)                                        inputstack.append(error)                        else:                            inputstack.append(value2)                            inputstack.append(value1)                            inputstack.append(error)            #REMAINDER            if lines.strip() == "rem":                if len(inputstack) <= 1:                    inputstack.append(error)                else:                    value1 = inputstack.pop()                    value2 = inputstack.pop()                    if value1.t == "int" and value2.t == "int" and value1.v != 0:                        total = value2.v%value1.v                        rem = Literal(total,"int")                        inputstack.append(rem)                    else:                        if (value1.t == "int" or value1.v in bindstack) and (value2.t == "int" or value2.v in bindstack) and value1.v != 0:                                if value1.t == "name" and value2.t != "name":                                    if isinstance(bindstack[value1.v], int):                                        total = value2.v%bindstack[value1.v]                                        rem = Literal(total, "int")                                        inputstack.append(rem)                                    else:                                        inputstack.append(value2)                                        inputstack.append(value1)                                        inputstack.append(error)                                if value2.t == "name" and value1.t != "name":                                    if isinstance(bindstack[value2.v], int):                                        total = bindstack[value2.v] % value1.v                                        rem = Literal(total, "int")                                        inputstack.append(rem)                                    else:                                        inputstack.append(value2)                                        inputstack.append(value1)                                        inputstack.append(error)                                if value1.t == "name" and value2.t == "name":                                    if isinstance(bindstack[value1.v], int) and isinstance(bindstack[value2.v], int):                                        total = bindstack[value2.v]%bindstack[value1.v]                                        rem = Literal(total, "int")                                        inputstack.append(rem)                                    else:                                        inputstack.append(value2)                                        inputstack.append(value1)                                        inputstack.append(error)                        else:                            inputstack.append(value2)                            inputstack.append(value1)                            inputstack.append(error)            #NEGATIVE            if lines.strip() == "neg":                if len(inputstack) == 0:                    inputstack.append(error)                else:                    value1 = inputstack.pop()                    if value1.t == "int" or value1.v in bindstack:                        if value1.v in bindstack:                            if isinstance(bindstack[value1.v], int):                                print("YES")                                neg = bindstack[value1.v] * -1                                negative = Literal(neg,"int")                                inputstack.append(negative)                            else:                                inputstack.append(value1)                                inputstack.append(error)                        else:                            neg = value1.v * -1                            negative = Literal(neg, "int")                            inputstack.append(negative)            #SWAP            if lines.strip() == "swap":                if len(inputstack) <= 1:                    inputstack.append(error)                else:                    value1 = inputstack.pop()                    value2 = inputstack.pop()                    inputstack.append(value1)                    inputstack.append(value2)            #QUIT            if lines.strip() == "quit":                for items in reversed(inputstack):                    if(items.t == "int"):                        outputfile.write(str(int(items.v)))                    else:                        outputfile.write(str(items.v))                    outputfile.write("\n")            # AND            if lines.strip() == "and":                if len(inputstack) <= 1:                    inputstack.append(error)                else:                    value1 = inputstack.pop()                    value2 = inputstack.pop()                    if value1.t == "bool" and value2.t == "bool":                        if value1.v == ":true:" and value2.v == ":true:":                            inputstack.append(truth)                        else:                            inputstack.append(fake)                    else:                        if (value1.t == "bool" or value1.v in bindstack) and (value2.t == "bool" or value2.v in bindstack):                            if value1.t == "name" and value2.t != "name":                                if typestack[value1.v] == "bool":                                    if bindstack[value1.v] == ":true:" and value2.v == ":true:":                                         inputstack.append(truth)                                    else:                                         inputstack.append(fake)                                else:                                    inputstack.append(value2)                                    inputstack.append(value1)                                    inputstack.append(error)                            if value1.t != "name" and value2.t == "name":                                if typestack[value2.v] == "bool":                                    if bindstack[value2.v] == ":true:" and value1.v == ":true:":                                        inputstack.append(truth)                                    else:                                        inputstack.append(fake)                                else:                                    inputstack.append(value2)                                    inputstack.append(value1)                                    inputstack.append(error)                            if value1.t == "name" and value2.t == "name":                                if typestack[value1.v] == "bool" and typestack[value2.v] == "bool":                                    if bindstack[value2.v] == ":true:" and bindstack[value1.v] == ":true:":                                        inputstack.append(truth)                                    else:                                        inputstack.append(fake)                                else:                                    inputstack.append(value2)                                    inputstack.append(value1)                                    inputstack.append(error)                        else:                            inputstack.append(value2)                            inputstack.append(value1)                            inputstack.append(error)            #OR            if lines.strip() == "or":                if len(inputstack) <= 1:                    inputstack.append(error)                else:                    value1 = inputstack.pop()                    value2 = inputstack.pop()                    if value1.t == "bool" and value2.t == "bool":                        if value1.v == ":true:" or value2.v == ":true:":                            inputstack.append(truth)                        else:                            inputstack.append(fake)                    else:                        if (value1.t == "bool" or value1.v in bindstack) and (                                value2.t == "bool" or value2.v in bindstack):                            if value1.t == "name" and value2.t != "name":                                if typestack[value1.v] == "bool":                                    if bindstack[value1.v] == ":true:" or value2.v == ":true:":                                        inputstack.append(truth)                                    else:                                        inputstack.append(fake)                                else:                                    inputstack.append(value2)                                    inputstack.append(value1)                                    inputstack.append(error)                            if value1.t != "name" and value2.t == "name":                                if typestack[value2.v] == "bool":                                    if bindstack[value2.v] == ":true:" or value1.v == ":true:":                                        inputstack.append(truth)                                    else:                                        inputstack.append(fake)                                else:                                    inputstack.append(value2)                                    inputstack.append(value1)                                    inputstack.append(error)                            if value1.t == "name" and value2.t == "name":                                if typestack[value1.v] == "bool" and typestack[value2.v] == "bool":                                    if bindstack[value2.v] == ":true:" or bindstack[value1.v] == ":true:":                                        inputstack.append(truth)                                    else:                                        inputstack.append(fake)                                else:                                    inputstack.append(value2)                                    inputstack.append(value1)                                    inputstack.append(error)                        else:                            inputstack.append(value2)                            inputstack.append(value1)                            inputstack.append(error)            #NOT            if lines.strip() == "not":                if len(inputstack) == 0:                    inputstack.append(error)                else:                    value = inputstack.pop()                    if value.t == "bool":                        if value.v == ":true:":                            inputstack.append(fake)                        else:                            inputstack.append(truth)                    else:                        if value in bindstack:                            if typestack[value] == "bool":                                if bindstack[value] == ":true:":                                    inputstack.append(fake)                                else:                                    inputstack.append(truth)                            else:                                inputstack.append(value)                                inputstack.append(error)                        else:                            inputstack.append(value)                            inputstack.append(error)            #EQUAL            if lines.strip() == "equal":                if len(inputstack) <= 1:                    inputstack.append(error)                else:                    value1 = inputstack.pop()                    value2 = inputstack.pop()                    if value1.t == "int" and value2.t == "int":                        if value1.v == value2.v:                            inputstack.append(truth)                        else:                            inputstack.append(fake)                    else:                        if (value1.t == "int" or value1.v in bindstack) and (value2.t == "int" or value2.v in bindstack):                            if value1.t == "name" and value2.t != "name":                                if typestack[value1.v] == "int":                                    if bindstack[value1.v] == value2.v:                                         inputstack.append(truth)                                    else:                                         inputstack.append(fake)                                else:                                    inputstack.append(value2)                                    inputstack.append(value1)                                    inputstack.append(error)                            if value1.t != "name" and value2.t == "name":                                if typestack[value2.v] == "int":                                    if bindstack[value2.v] == value1.v:                                        inputstack.append(truth)                                    else:                                        inputstack.append(fake)                                else:                                    inputstack.append(value2)                                    inputstack.append(value1)                                    inputstack.append(error)                            if value1.t == "name" and value2.t == "name":                                if typestack[value1.v] == "int" and typestack[value2.v] == "int":                                    if bindstack[value2.v] == bindstack[value1.v]:                                        inputstack.append(truth)                                    else:                                        inputstack.append(fake)                                else:                                    inputstack.append(value2)                                    inputstack.append(value1)                                    inputstack.append(error)                        else:                            inputstack.append(value2)                            inputstack.append(value1)                            inputstack.append(error)            #LESS THAN            if lines.strip() == "lessThan":                if len(inputstack) <= 1:                    inputstack.append(error)                else:                    value1 = inputstack.pop()                    value2 = inputstack.pop()                    if value1.t == "int" and value2.t == "int":                        if value1.v > value2.v:                            inputstack.append(truth)                        else:                            inputstack.append(fake)                    else:                        if (value1.t == "int" or value1.v in bindstack) and (value2.t == "int" or value2.v in bindstack):                            if value1.t == "name" and value2.t != "name":                                if typestack[value1.v] == "int":                                    if bindstack[value1.v] > value2.v:                                         inputstack.append(truth)                                    else:                                         inputstack.append(fake)                                else:                                    inputstack.append(value2)                                    inputstack.append(value1)                                    inputstack.append(error)                            if value1.t != "name" and value2.t == "name":                                if typestack[value2.v] == "int":                                    if bindstack[value2.v] < value1.v:                                        inputstack.append(truth)                                    else:                                        inputstack.append(fake)                                else:                                    inputstack.append(value2)                                    inputstack.append(value1)                                    inputstack.append(error)                            if value1.t == "name" and value2.t == "name":                                if typestack[value1.v] == "int" and typestack[value2.v] == "int":                                    if bindstack[value2.v] < bindstack[value1.v]:                                        inputstack.append(truth)                                    else:                                        inputstack.append(fake)                                else:                                    inputstack.append(value2)                                    inputstack.append(value1)                                    inputstack.append(error)                        else:                            inputstack.append(value2)                            inputstack.append(value1)                            inputstack.append(error)            #BIND            if lines.strip() == "bind":                if len(inputstack) <= 1:                    inputstack.append(error)                else:                    value1 = inputstack.pop()                    valueName = inputstack.pop()                    if valueName.t == "name" and not value1.t == "error":                        if value1.t == "name":                            unit = Literal(":unit:","unit")                            inputstack.append(unit)                            bindstack[valueName.v] = bindstack[value1.v]                            typestack[valueName.v] = typestack[value1.v]                        else:                            unit = Literal(":unit:","unit")                            inputstack.append(unit)                            bindstack[valueName.v] = value1.v                            typestack[valueName.v] = value1.t                    else:                        inputstack.append(valueName)                        inputstack.append(value1)                        inputstack.append(error)            #IF            if lines.strip() == "if":                if len(inputstack) < 3:                    inputstack.append(error)                else:                    valuex = inputstack.pop()                    valuey = inputstack.pop()                    valueBool = inputstack.pop()                    print(valueBool.t)                    print(valueBool.v in typestack)                    if valueBool.t != "bool" and not valueBool.v in typestack:                        print("YESSSSS")                        inputstack.append(valueBool)                        inputstack.append(valuey)                        inputstack.append(valuex)                        inputstack.append(error)                    else:                        if valueBool.v in typestack:                            if typestack[valueBool.v] == "bool":                                if bindstack[valueBool.v] == ":true:":                                    inputstack.append(valuex)                                else:                                    inputstack.append(valuey)                            else:                                inputstack.append(valueBool)                                inputstack.append(valuey)                                inputstack.append(valuex)                                inputstack.append(error)                        else:                            if valueBool.v == ":true:":                                inputstack.append(valuex)                            else:                                inputstack.append(valuey)            #let end            if lines.strip() == "let":                scopetrack = scopetrack + 1                newEnvo = enviorment(inputstack,bindstack,typestack)                       # for things in inputstack:        #    print("value : " + str(things.v))       #     print("type : " + things.t)       #     if things.v in bindstack:       #         print("name value : " + str(bindstack[things.v]))        #        print("name type : " + str(typestack[things.v]))       #     print()        #for things in bindstack.values():        #   print(things)        #for things in inputstack:         #   print (things.v)def hasNumbers(inputString):    return any(char.isdigit() for char in inputString)def isInt(s):    if s[0] == '-':        return s[1:].isdigit()    return s.isdigit()#interpreter2("in1_updated.txt","output1.txt")#interpreter2("in2_updated.txt","output2.txt")#interpreter2("in3.txt","output3.txt")#interpreter2("in4.txt","output4.txt")#interpreter2("in5.txt","output5.txt")#interpreter2("in6.txt","output6.txt")#interpreter2("in7.txt","output7.txt")#interpreter2("in8.txt","output8.txt")#interpreter2("in9.txt","output9.txt")#interpreter2("in10.txt","output10.txt")#have an integer to determine that scope you're in so for every let you type in, the integer increases by one and for every end, it minuses by one, 0 represents the global scope.