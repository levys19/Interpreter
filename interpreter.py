import copyclass Literal:    def __init__(self,value,type):        self.v = value        self.t = typeclass enviorment:    def __init__(self,i,b,t):        self.i = i        self.b = b        self.t = t        self.children = []        self.parent = None        self.scopetrack = 0    def add_child(self, node):        self.children.append(copy.deepcopy(node))    def pushInt(self,value):        number = Literal(int(value),"int")        self.i.append(number)        self.scopetrack = self.scopetrack + 1    def pushString(self,value):        string = Literal(value,"string")        self.i.append(string)        self.scopetrack = self.scopetrack + 1    def pushName(self,value):        name = Literal(value,"name")        self.i.append(name)        self.scopetrack = self.scopetrack + 1    def pushBool(self,value):        Bool = Literal(value,"bool")        self.i.append(Bool)        self.scopetrack = self.scopetrack + 1    def pushError(self):        error = Literal(":error:","error")        self.i.append(error)        self.scopetrack = self.scopetrack + 1    def pushUnit(self):        unit = Literal(":unit:","unit")        self.i.append(unit)        self.scopetrack = self.scopetrack + 1    def pushBack(self,thing):        self.i.append(thing)        self.scopetrack = self.scopetrack + 1    def pop(self):        self.scopetrack = self.scopetrack - 1        return self.i.pop()    def outputList(self,outfile):        for items in reversed(self.i):            if items.t == "int":                outfile.write(str(int(items.v)))            else:                outfile.write(str(items.v))            outfile.write("\n")def interpreter(input, output):        inputfile = open(input, "r")        outputfile = open(output, "w")        linereader = inputfile.readlines()        inputlist = list()        bindlist = {}        typelist = {}        inputstack = enviorment(inputlist,bindlist,typelist)        oldstack = enviorment(inputlist,bindlist,typelist)        for lines in linereader:            if lines.split(' ' , 1)[0] == "push":                x = lines.split(' ',1)[1].strip()                if x[0].isalpha() or isInt(x) or (x.startswith('"') and x.endswith('"')):                    if isInt(x):                        #push int                        inputstack.pushInt(int(x))                    if x.startswith('"') and x.endswith('"'):                        #push string                        inputstack.pushString(x[1:-1])                    if x[0].isalpha():                        #push name                        inputstack.pushName(x)                else:                    inputstack.pushError()            if lines.strip() == "pop":                if not inputstack:                    inputstack.pushError()                else:                    inputstack.pop()            if lines.strip() == ":false:":                inputstack.pushBool(":false:")            if lines.strip() == ":true:":                inputstack.pushBool(":true:")            if lines.strip() == ":error:":                inputstack.pushError()            #ADD            if lines.strip() == "add":                if len(inputstack.i) <= 1:                    inputstack.pushError()                else:                    value1 = inputstack.pop()                    value2 = inputstack.pop()                    if value1.t == "int" and value2.t == "int":                        total = value1.v + value2.v                        inputstack.pushInt(total)                    else:                        if (value1.t == "int" or (value1.v in inputstack.b and value1.t == "name")) and (value2.t == "int" or (value2.v in inputstack.b and value2.t == "name")):                                if value1.t == "name" and value2.t != "name":                                    if isinstance(inputstack.b[value1.v], int):                                        total = value2.v + inputstack.b[value1.v]                                        inputstack.pushInt(total)                                    else:                                        inputstack.pushBack(value2)                                        inputstack.pushBack(value1)                                        inputstack.pushError()                                if value2.t == "name" and value1.t != "name":                                    if isinstance(inputstack.b[value2.v], int):                                        total = inputstack.b[value2.v] + value1.v                                        inputstack.pushInt(total)                                    else:                                        inputstack.pushBack(value2)                                        inputstack.pushBack(value1)                                        inputstack.pushError()                                if value1.t == "name" and value2.t == "name":                                    if isinstance(inputstack.b[value1.v], int) and isinstance(inputstack.b[value2.v], int):                                        total = inputstack.b[value2.v] + inputstack.b[value1.v]                                        inputstack.pushInt(total)                                    else:                                        inputstack.pushBack(value2)                                        inputstack.pushBack(value1)                                        inputstack.pushError()                        else:                            inputstack.pushBack(value2)                            inputstack.pushBack(value1)                            inputstack.pushError()            #Substract            if lines.strip() == "sub":                if len(inputstack.i) <= 1:                    inputstack.pushError()                else:                    value1 = inputstack.pop()                    value2 = inputstack.pop()                    if value1.t == "int" and value2.t == "int":                        total = value2.v - value1.v                        inputstack.pushInt(total)                    else:                        if (value1.t == "int" or (value1.v in inputstack.b and value1.t == "name")) and (value2.t == "int" or (value2.v in inputstack.b and value2.t == "name")):                                if value1.t == "name" and value2.t != "name":                                    if isinstance(inputstack.b[value1.v], int):                                        total = value2.v-inputstack.b[value1.v]                                        inputstack.pushInt(total)                                    else:                                        inputstack.pushBack(value2)                                        inputstack.pushBack(value1)                                        inputstack.pushError()                                if value2.t == "name" and value1.t != "name":                                    if isinstance(inputstack.b[value2.v], int):                                        total = inputstack.b[value2.v] - value1.v                                        inputstack.pushInt(total)                                    else:                                        inputstack.pushBack(value2)                                        inputstack.pushBack(value1)                                        inputstack.pushError()                                if value1.t == "name" and value2.t == "name":                                    if isinstance(inputstack.b[value1.v], int) and isinstance(inputstack.b[value2.v], int):                                        total = inputstack.b[value2.v]-inputstack.b[value1.v]                                        inputstack.pushInt(total)                                    else:                                        inputstack.pushBack(value2)                                        inputstack.pushBack(value1)                                        inputstack.pushError()                        else:                            inputstack.pushBack(value2)                            inputstack.pushBack(value1)                            inputstack.pushError()            #MULTIPLY            if lines.strip() == "mul":                if len(inputstack.i) <= 1:                    inputstack.pushError()                else:                    value1 = inputstack.pop()                    value2 = inputstack.pop()                    if value1.t == "int" and value2.t == "int":                        total = value1.v * value2.v                        inputstack.pushInt(total)                    else:                        if (value1.t == "int" or (value1.v in inputstack.b and value1.t == "name")) and (value2.t == "int" or (value2.v in inputstack.b and value2.t == "name")):                                if value1.t == "name" and value2.t != "name":                                    if isinstance(inputstack.b[value1.v], int):                                        total = value2.v * inputstack.b[value1.v]                                        inputstack.pushInt(total)                                    else:                                        inputstack.pushBack(value2)                                        inputstack.pushBack(value1)                                        inputstack.pushError()                                if value2.t == "name" and value1.t != "name":                                    if isinstance(inputstack.b[value2.v], int):                                        total = inputstack.b[value2.v] * value1.v                                        inputstack.pushInt(total)                                    else:                                        inputstack.pushBack(value2)                                        inputstack.pushBack(value1)                                        inputstack.pushError()                                if value1.t == "name" and value2.t == "name":                                    if isinstance(inputstack.b[value1.v], int) and isinstance(inputstack.b[value2.v], int):                                        total = inputstack.b[value2.v]*inputstack.b[value1.v]                                        inputstack.pushInt(total)                                    else:                                        inputstack.pushBack(value2)                                        inputstack.pushBack(value1)                                        inputstack.pushError()                        else:                            inputstack.pushBack(value2)                            inputstack.pushBack(value1)                            inputstack.pushError()            #DIVIDE            if lines.strip() == "div":                if len(inputstack.i) <= 1:                    inputstack.pushError()                else:                    value1 = inputstack.pop()                    value2 = inputstack.pop()                    if value1.t == "int" and value2.t == "int" and value1.v != 0:                        total = value2.v/value1.v                        div = Literal(total,"int")                        inputstack.pushInt(total)                    else:                        if (value1.t == "int" or (value1.v in inputstack.b and value1.t == "name")) and (value2.t == "int" or (value2.v in inputstack.b and value2.t == "name")) and value1.v != 0:                                if value1.t == "name" and value2.t != "name":                                    if isinstance(inputstack.b[value1.v], int):                                        total = value2.v/inputstack.b[value1.v]                                        inputstack.pushInt(total)                                    else:                                        inputstack.pushBack(value2)                                        inputstack.pushBack(value1)                                        inputstack.pushError()                                if value2.t == "name" and value1.t != "name":                                    if isinstance(inputstack.b[value2.v], int):                                        total = inputstack.b[value2.v] / value1.v                                        inputstack.pushInt(total)                                    else:                                        inputstack.pushBack(value2)                                        inputstack.pushBack(value1)                                        inputstack.pushError()                                if value1.t == "name" and value2.t == "name":                                    if isinstance(inputstack.b[value1.v], int) and isinstance(inputstack.b[value2.v], int):                                        total = inputstack.b[value2.v]/inputstack.b[value1.v]                                        inputstack.pushInt(total)                                    else:                                        inputstack.pushBack(value2)                                        inputstack.pushBack(value1)                                        inputstack.pushError()                        else:                            inputstack.pushBack(value2)                            inputstack.pushBack(value1)                            inputstack.pushError()            #REMAINDER            if lines.strip() == "rem":                if len(inputstack.i) <= 1:                    inputstack.pushError()                else:                    value1 = inputstack.pop()                    value2 = inputstack.pop()                    if value1.t == "int" and value2.t == "int" and value1.v != 0:                        total = value2.v%value1.v                        inputstack.pushInt(total)                    else:                        if (value1.t == "int" or (value1.v in inputstack.b and value1.t == "name")) and (value2.t == "int" or (value2.v in inputstack.b and value2.t == "name")) and value1.v != 0:                                if value1.t == "name" and value2.t != "name":                                    if isinstance(inputstack.b[value1.v], int):                                        total = value2.v%inputstack.b[value1.v]                                        inputstack.pushInt(total)                                    else:                                        inputstack.pushBack(value2)                                        inputstack.pushBack(value1)                                        inputstack.pushError()                                if value2.t == "name" and value1.t != "name":                                    if isinstance(inputstack.b[value2.v], int):                                        total = inputstack.b[value2.v] % value1.v                                        inputstack.pushInt(total)                                    else:                                        inputstack.pushBack(value2)                                        inputstack.pushBack(value1)                                        inputstack.pushError()                                if value1.t == "name" and value2.t == "name":                                    if isinstance(inputstack.b[value1.v], int) and isinstance(inputstack.b[value2.v], int):                                        total = inputstack.b[value2.v]%inputstack.b[value1.v]                                        inputstack.pushInt(total)                                    else:                                        inputstack.pushBack(value2)                                        inputstack.pushBack(value1)                                        inputstack.pushError()                        else:                            inputstack.pushBack(value2)                            inputstack.pushBack(value1)                            inputstack.pushError()            #NEGATIVE            if lines.strip() == "neg":                if len(inputstack.i) == 0:                    inputstack.pushError()                else:                    value1 = inputstack.pop()                    if value1.t == "int" or (value1.t == "name" and value1.v in inputstack.b):                        if value1.v in inputstack.b:                            if isinstance(inputstack.b[value1.v], int):                                neg = inputstack.b[value1.v] * -1                                inputstack.pushInt(neg)                            else:                                inputstack.pushBack(value1)                                inputstack.pushError()                        else:                            neg = value1.v * -1                            inputstack.pushInt(neg)                    else:                        inputstack.pushBack(value1)                        inputstack.pushError()            #SWAP            if lines.strip() == "swap":                if len(inputstack.i) <= 1:                    inputstack.pushError()                else:                    value1 = inputstack.pop()                    value2 = inputstack.pop()                    inputstack.pushBack(value1)                    inputstack.pushBack(value2)            #QUIT            if lines.strip() == "quit":                inputstack.outputList(outputfile)            # AND            if lines.strip() == "and":                if len(inputstack.i) <= 1:                    inputstack.pushError()                else:                    value1 = inputstack.pop()                    value2 = inputstack.pop()                    if value1.t == "bool" and value2.t == "bool":                        if value1.v == ":true:" and value2.v == ":true:":                            inputstack.pushBool(":true:")                        else:                            inputstack.pushBool(":false:")                    else:                        if (value1.t == "bool" or value1.v in inputstack.b) and (value2.t == "bool" or value2.v in inputstack.b):                            if value1.t == "name" and value2.t != "name":                                if inputstack.t[value1.v] == "bool":                                    if inputstack.b[value1.v] == ":true:" and value2.v == ":true:":                                         inputstack.pushBool(":true:")                                    else:                                         inputstack.pushBool(":false:")                                else:                                    inputstack.pushBack(value2)                                    inputstack.pushBack(value1)                                    inputstack.pushError()                            if value1.t != "name" and value2.t == "name":                                if inputstack.t[value2.v] == "bool":                                    if inputstack.b[value2.v] == ":true:" and value1.v == ":true:":                                        inputstack.pushBool(":true:")                                    else:                                        inputstack.pushBool(":false:")                                else:                                    inputstack.pushBack(value2)                                    inputstack.pushBack(value1)                                    inputstack.pushError()                            if value1.t == "name" and value2.t == "name":                                if inputstack.t[value1.v] == "bool" and inputstack.t[value2.v] == "bool":                                    if inputstack.b[value2.v] == ":true:" and inputstack.b[value1.v] == ":true:":                                        inputstack.pushBool(":true:")                                    else:                                        inputstack.pushBool(":false:")                                else:                                    inputstack.pushBack(value2)                                    inputstack.pushBack(value1)                                    inputstack.pushError()                        else:                            inputstack.pushBack(value2)                            inputstack.pushBack(value1)                            inputstack.pushError()            #OR            if lines.strip() == "or":                if len(inputstack.i) <= 1:                    inputstack.pushError()                else:                    value1 = inputstack.pop()                    value2 = inputstack.pop()                    if value1.t == "bool" and value2.t == "bool":                        if value1.v == ":true:" or value2.v == ":true:":                            inputstack.pushBool(":true:")                        else:                            inputstack.pushBool(":false:")                    else:                        if (value1.t == "bool" or value1.v in inputstack.b) and (                                value2.t == "bool" or value2.v in inputstack.b):                            if value1.t == "name" and value2.t != "name":                                if inputstack.t[value1.v] == "bool":                                    if inputstack.b[value1.v] == ":true:" or value2.v == ":true:":                                        inputstack.pushBool(":true:")                                    else:                                        inputstack.pushBool(":false:")                                else:                                    inputstack.pushBack(value2)                                    inputstack.pushBack(value1)                                    inputstack.pushError()                            if value1.t != "name" and value2.t == "name":                                if inputstack.t[value2.v] == "bool":                                    if inputstack.b[value2.v] == ":true:" or value1.v == ":true:":                                        inputstack.pushBool(":true:")                                    else:                                        inputstack.pushBool(":false:")                                else:                                    inputstack.pushBack(value2)                                    inputstack.pushBack(value1)                                    inputstack.pushError()                            if value1.t == "name" and value2.t == "name":                                if inputstack.t[value1.v] == "bool" and inputstack.t[value2.v] == "bool":                                    if inputstack.b[value2.v] == ":true:" or inputstack.b[value1.v] == ":true:":                                        inputstack.pushBool(":true:")                                    else:                                        inputstack.pushBool(":false:")                                else:                                    inputstack.pushBack(value2)                                    inputstack.pushBack(value1)                                    inputstack.pushError()                        else:                            inputstack.pushBack(value2)                            inputstack.pushBack(value1)                            inputstack.pushError()            #NOT            if lines.strip() == "not":                if len(inputstack.i) == 0:                    inputstack.pushError()                else:                    value = inputstack.pop()                    if value.t == "bool":                        if value.v == ":true:":                            inputstack.pushBool(":false:")                        else:                            inputstack.pushBool(":true:")                    else:                        if value.v in inputstack.b:                            if inputstack.t[value.v] == "bool":                                if inputstack.b[value.v] == ":true:":                                    inputstack.pushBool(":false:")                                else:                                    inputstack.pushBool(":true:")                            else:                                inputstack.pushBack(value)                                inputstack.pushError()                        else:                            inputstack.pushBack(value)                            inputstack.pushError()            #EQUAL            if lines.strip() == "equal":                if len(inputstack.i) <= 1:                    inputstack.pushError()                else:                    value1 = inputstack.pop()                    value2 = inputstack.pop()                    if value1.t == "int" and value2.t == "int":                        if value1.v == value2.v:                            inputstack.pushBool(":true:")                        else:                            inputstack.pushBool(":false:")                    else:                        if (value1.t == "int" or (value1.v in inputstack.b and value1.t == "name")) and (value2.t == "int" or (value2.v in inputstack.b and value2.t == "name")):                            if value1.t == "name" and value2.t != "name":                                if inputstack.t[value1.v] == "int":                                    if inputstack.b[value1.v] == value2.v:                                         inputstack.pushBool(":true:")                                    else:                                         inputstack.pushBool(":false:")                                else:                                    inputstack.pushBack(value2)                                    inputstack.pushBack(value1)                                    inputstack.pushError()                            if value1.t != "name" and value2.t == "name":                                if inputstack.t[value2.v] == "int":                                    if inputstack.b[value2.v] == value1.v:                                        inputstack.pushBool(":true:")                                    else:                                        inputstack.pushBool(":false:")                                else:                                    inputstack.pushBack(value2)                                    inputstack.pushBack(value1)                                    inputstack.pushError()                            if value1.t == "name" and value2.t == "name":                                if inputstack.t[value1.v] == "int" and inputstack.t[value2.v] == "int":                                    if inputstack.b[value2.v] == inputstack.b[value1.v]:                                        inputstack.pushBool(":true:")                                    else:                                        inputstack.pushBool(":false:")                                else:                                    inputstack.pushBack(value2)                                    inputstack.pushBack(value1)                                    inputstack.pushError()                        else:                            inputstack.pushBack(value2)                            inputstack.pushBack(value1)                            inputstack.pushError()            #LESS THAN            if lines.strip() == "lessThan":                if len(inputstack.i) <= 1:                    inputstack.pushError()                else:                    value1 = inputstack.pop()                    value2 = inputstack.pop()                    if value1.t == "int" and value2.t == "int":                        if value1.v > value2.v:                            inputstack.pushBool(":true:")                        else:                            inputstack.pushBool(":false:")                    else:                        if (value1.t == "int" or (value1.v in inputstack.b and value1.t == "name")) and (value2.t == "int" or (value2.v in inputstack.b and value2.t == "name")):                            if value1.t == "name" and value2.t != "name":                                if inputstack.t[value1.v] == "int":                                    if inputstack.b[value1.v] > value2.v:                                         inputstack.pushBool(":true:")                                    else:                                         inputstack.pushBool(":false:")                                else:                                    inputstack.pushBack(value2)                                    inputstack.pushBack(value1)                                    inputstack.pushError()                            if value1.t != "name" and value2.t == "name":                                if inputstack.t[value2.v] == "int":                                    if inputstack.b[value2.v] < value1.v:                                        inputstack.pushBool(":true:")                                    else:                                        inputstack.pushBool(":false:")                                else:                                    inputstack.pushBack(value2)                                    inputstack.pushBack(value1)                                    inputstack.pushError()                            if value1.t == "name" and value2.t == "name":                                if inputstack.t[value1.v] == "int" and inputstack.t[value2.v] == "int":                                    if inputstack.b[value2.v] < inputstack.b[value1.v]:                                        inputstack.pushBool(":true:")                                    else:                                        inputstack.pushBool(":false:")                                else:                                    inputstack.pushBack(value2)                                    inputstack.pushBack(value1)                                    inputstack.pushError()                        else:                            inputstack.pushBack(value2)                            inputstack.pushBack(value1)                            inputstack.pushError()            #BIND            if lines.strip() == "bind":                if len(inputstack.i) <= 1:                    inputstack.pushError()                else:                    value1 = inputstack.pop()                    valueName = inputstack.pop()                    if valueName.t == "name" and not value1.t == "error":                        if value1.t == "name":                            if value1.v in inputstack.b:                                inputstack.pushUnit()                                inputstack.b[valueName.v] = inputstack.b[value1.v]                                inputstack.t[valueName.v] = inputstack.t[value1.v]                            else:                                inputstack.pushBack(valueName)                                inputstack.pushBack(value1)                                inputstack.pushError()                        else:                            unit = Literal(":unit:","unit")                            inputstack.pushUnit()                            inputstack.b[valueName.v] = value1.v                            inputstack.t[valueName.v] = value1.t                    else:                        inputstack.pushBack(valueName)                        inputstack.pushBack(value1)                        inputstack.pushError()            #IF            if lines.strip() == "if":                if len(inputstack.i) < 3:                    inputstack.pushError()                else:                    valuex = inputstack.pop()                    valuey = inputstack.pop()                    valueBool = inputstack.pop()                    if valueBool.t != "bool" and not valueBool.v in inputstack.t:                        inputstack.pushBack(valueBool)                        inputstack.pushBack(valuey)                        inputstack.pushBack(valuex)                        inputstack.pushError()                    else:                        if valueBool.v in inputstack.t:                            if inputstack.t[valueBool.v] == "bool":                                if inputstack.b[valueBool.v] == ":true:":                                    inputstack.pushBack(valuex)                                else:                                    inputstack.pushBack(valuey)                            else:                                inputstack.pushBack(valueBool)                                inputstack.pushBack(valuey)                                inputstack.pushBack(valuex)                                inputstack.pushError()                        else:                            if valueBool.v == ":true:":                                inputstack.pushBack(valuex)                            else:                                inputstack.pushBack(valuey)            #let end            if lines.strip() == "let":                inputstack.parent = copy.deepcopy(inputstack)                inputstack.add_child(inputstack)                inputstack = inputstack.children[0]            if lines.strip() == "end":                #print ("child : " + str(len(inputstack.i)))                #print("parent : " + str(len(inputstack.parent.i)))                if len(inputstack.i) >= len(inputstack.parent.i):                    x = inputstack.pop()                    inputstack = inputstack.parent                    inputstack.pushBack(x)                else:                    inputstack = inputstack.parent            #funtion starts            if lines.split(' ',2)[0] == "fun" and lines.split(' ',2)[1][0].isalpha() and lines.split(' ',2)[2][0].isalpha() and lines.split(' ',2)[1] != lines.split(' ',2)[2] and lines.split(' ',2)[1]                print("scooby")            #funends            if lines.strip() == "funEnd"        # for things in inputstack.i:        #    print("value : " + str(things.v))        #    print("type : " + things.t)        #    if things.v in inputstack.b:        #       print("name value : " + str(inputstack.b[things.v]))        #       print("name type : " + str(inputstack.b[things.v]))        #    print()def hasNumbers(inputString):    return any(char.isdigit() for char in inputString)def isInt(s):    if s[0] == '-':        return s[1:].isdigit()    return s.isdigit()interpreter("input1.txt","output1.txt")#interpreter2("in2_updated.txt","output2.txt")#interpreter2("in3.txt","output3.txt")#interpreter2("in4.txt","output4.txt")#interpreter2("in5.txt","output5.txt")#interpreter2("in6.txt","output6.txt")#interpreter2("in7.txt","output7.txt")#interpreter2("in8.txt","output8.txt")#interpreter2("in9.txt","output9.txt")#interpreter("in10.txt","output10.txt")#have an integer to determine that scope you're in so for every let you type in, the integer increases by one and for every end, it minuses by one, 0 represents the global scope.